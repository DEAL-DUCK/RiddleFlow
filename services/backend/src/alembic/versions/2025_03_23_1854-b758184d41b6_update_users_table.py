"""Update Users table

Revision ID: b758184d41b6
Revises: 6e925d2f773d
Create Date: 2025-03-23 18:54:58.497274

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlalchemy_utils


# revision identifiers, used by Alembic.
revision: str = "b758184d41b6"
down_revision: Union[str, None] = "6e925d2f773d"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "users", sa.Column("hashed_password", sa.String(length=128), nullable=False)
    )
    op.add_column(
        "users",
        sa.Column(
            "email", sqlalchemy_utils.types.email.EmailType(length=255), nullable=False
        ),
    )
    op.add_column(
        "users",
        sa.Column(
            "role", sa.Enum("PARTICIPANT", "CREATOR", name="userrole"), nullable=False
        ),
    )

    # Используем batch_alter_table для создания уникального ограничения
    with op.batch_alter_table("users") as batch_op:
        batch_op.create_unique_constraint("uq_email", ["email"])
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("users") as batch_op:
        batch_op.drop_constraint("uq_email", type_="unique")

    op.drop_column("users", "role")
    op.drop_column("users", "email")
    op.drop_column("users", "hashed_password")
    # ### end Alembic commands ###